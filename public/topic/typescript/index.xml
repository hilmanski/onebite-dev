<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>typescript on Onebite Dev</title>
    <link>https://onebite.dev/topic/typescript/</link>
    <description>Recent content in typescript on Onebite Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Sep 2022 00:37:00 +0000</lastBuildDate><atom:link href="https://onebite.dev/topic/typescript/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to declare type in Object destructuring typescript</title>
      <link>https://onebite.dev/how-to-declare-type-in-object-destructuring-typescript/</link>
      <pubDate>Sun, 18 Sep 2022 00:37:00 +0000</pubDate>
      
      <guid>https://onebite.dev/how-to-declare-type-in-object-destructuring-typescript/</guid>
      <description>Learn how to declare type in typescript when using Object destructuring in Javascript.
At first, I tried using semicolon(:) and type but it keeps showing me an error.
function TextElement({el: TextEl, text: string}){ .. } What&amp;rsquo;s wrong with above is, in Javascript putting semicolon on object desctructuring means assign the value to it. So it&amp;rsquo;ll find TextEl variable and assign to El. That&amp;rsquo;s not what we want!
What we should do to be able to use typescript in &amp;ldquo;Javascript Object Desctrucure&amp;rdquo; is the following:</description>
    </item>
    
    <item>
      <title>How to declare object property type in typescript</title>
      <link>https://onebite.dev/how-to-declare-object-property-type-in-typescript/</link>
      <pubDate>Fri, 16 Sep 2022 23:11:00 +0000</pubDate>
      
      <guid>https://onebite.dev/how-to-declare-object-property-type-in-typescript/</guid>
      <description>Let&amp;rsquo;s learn How to declare object property type in typescript using interface.
Assume we have a TextElement object that have several properties, and we want to safely type it.
Here&amp;rsquo;s how to declare it in typescript:
interface TextEl { x: number, y: number, text: String, fontSize: number, fontWeight: String, fontStyle: String, color: String, pageNumber: number, id: String, isRemoved: boolean, } Using interface keyword, followed by name we want. We can declare any property we need with it&amp;rsquo;s type, either number, String, boolean, ect.</description>
    </item>
    
    <item>
      <title>Declare possible values of string in typescript</title>
      <link>https://onebite.dev/declare-possible-values-of-string-in-typescript/</link>
      <pubDate>Fri, 16 Sep 2022 22:59:00 +0000</pubDate>
      
      <guid>https://onebite.dev/declare-possible-values-of-string-in-typescript/</guid>
      <description>How to declare possible values of string in typescript. So we get an error if the provided parameter is wrong or have a typo?
We use type $NAME = &amp;quot;possibleVal1&amp;quot; | &amp;quot;possibleVal2&amp;quot;
For example I have a type called Actions with three possible values:
type Actions = &amp;#34;strong&amp;#34; | &amp;#34;italic&amp;#34; | &amp;#34;remove&amp;#34; Now if I want to proved value for Actions type with a typo like &amp;lsquo;stronk&amp;rsquo; , then VS Code will warn me about it.</description>
    </item>
    
    <item>
      <title>What is type for onClick event in reactJS using typescript</title>
      <link>https://onebite.dev/what-is-type-for-onclick-event-in-reactjs-using-typescript/</link>
      <pubDate>Fri, 16 Sep 2022 22:51:00 +0000</pubDate>
      
      <guid>https://onebite.dev/what-is-type-for-onclick-event-in-reactjs-using-typescript/</guid>
      <description>What is the correct type when using onClick event in reactJS using typescript?
Right now, I have two possibilites:
 React.MouseEvent&amp;lt;Element&amp;gt; React.MouseEvent&amp;lt;HTMLElement&amp;gt;  function handleClick(event: React.MouseEvent&amp;lt;Element&amp;gt;){ .. } or
function handleClick(event: React.MouseEvent&amp;lt;HTMLElement&amp;gt;){ .. } </description>
    </item>
    
    <item>
      <title>How to resolve Option --resolveJsonModule cannot be specified without node module resolution strategy.ts</title>
      <link>https://onebite.dev/how-to-resolve-option--resolvejsonmodule-cannot-be-specified-without-node-module-resolution-strategy.ts/</link>
      <pubDate>Thu, 15 Sep 2022 21:34:00 +0000</pubDate>
      
      <guid>https://onebite.dev/how-to-resolve-option--resolvejsonmodule-cannot-be-specified-without-node-module-resolution-strategy.ts/</guid>
      <description>This is how to resolve Option &amp;lsquo;&amp;ndash;resolveJsonModule&amp;rsquo; cannot be specified without &amp;rsquo;node&amp;rsquo; module resolution strategy.ts error on typescript tsconfig.json file
How to solve this issue?
What we need is adding
&amp;#34;moduleResolution&amp;#34;: &amp;#34;node&amp;#34;, inside compilerOptions property in tsconfig.json file
Read about module resolution in typescript</description>
    </item>
    
    <item>
      <title>How to use typescript in existing NextJS project</title>
      <link>https://onebite.dev/how-to-use-typescript-in-existing-nextjs-project/</link>
      <pubDate>Thu, 15 Sep 2022 20:57:00 +0000</pubDate>
      
      <guid>https://onebite.dev/how-to-use-typescript-in-existing-nextjs-project/</guid>
      <description>I already have a running NextJS project but I want to start using typescript. Lets see how to add typescript in existing NextJS project
 This setup tested in NextJS v12
 Create tsconfig.json file Go to your project directory , then add new empty file tsconfig.json or via terminal
touch tsconfig.json Install typescript requirement on NextJS Stop the server if it&amp;rsquo;s currently running. Then run yarn dev or npm run dev.</description>
    </item>
    
  </channel>
</rss>
